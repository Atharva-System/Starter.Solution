@page "/sampleDataLoad"
<div class="panel mt-6">
    <h5 class="text-lg font-semibold dark:text-white-light">Advanced</h5>
    <div class="dataTable-wrapper dataTable-loading no-footer sortable fixed-columns">
        <div class="dataTable-top"></div>
        <div class="dataTable-container">
            <table id="myTable" class="table-hover whitespace-nowrap dataTable-table">
                <GridHeader HeaderInfo="@headerInfo" />
                <GridBody HeaderInfo="@headerInfo" DisplayedData="@DisplayedData" />
            </table>
        </div>
        <!-- Updated Pagination -->
        <Pagination CurrentPage="@currentPage" ItemPerPage="@itemsPerPage" TotalPages="@totalPages" TotalRecord="@totalRecord" OnPageChange="@ChangePage" OnPageSizeChange="@ChangePageSize" />
    </div>
</div>

@code {
    private List<Dictionary<string, object>> DisplayedData = new List<Dictionary<string, object>>();
    private List<Dictionary<string, string>> headerInfo = new List<Dictionary<string, string>>();
    private int currentPage = 1;
    private int totalPages = 0;
    private int itemsPerPage = 10;
    private int totalRecord = 0;


    protected override async Task OnInitializedAsync()
    {
        // Load data when the component initializes
        await LoadData();
    }

    private async Task LoadData()
    {
        // Simulate fetching data from a service or database
        // Here, we'll simulate with some hardcoded data
        var allData = GenerateSampleData();

        // Paginate the data based on the current page and items per page
        DisplayedData = PaginateData(allData, currentPage, itemsPerPage);

        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)allData.Count / itemsPerPage);
        totalRecord = allData.Count;
    }

    private List<Dictionary<string, object>> GenerateSampleData()
    {
        // Generate sample data - replace with your actual data retrieval logic
        var sampleData = new List<Dictionary<string, object>>();

        // Add sample data rows
        for (int i = 1; i <= 100; i++)
        {
            sampleData.Add(new Dictionary<string, object> { { "FullName", "Alice" + i.ToString() }, { "Status", "Active" }, { "Role", "Admin" }, { "Email", "alice@example.com" } });
        }
        headerInfo = new List<Dictionary<string, string>>
        {
            new Dictionary<string, string> {{"Name", "Full Name"},{ "Key","FullName"}, {"CssClass", ""}, {"ShowSorting", "true"},{ "SorderOrder","asc" }, {"ShowFilter", "true"}},
            new Dictionary<string, string> {{"Name", "Email"},{ "Key","Email"}, {"CssClass", ""}, {"ShowSorting", "false"},{ "SorderOrder","asc" }, {"ShowFilter", "false"}},
            new Dictionary<string, string> {{"Name", "Status"},{ "Key","Status"}, {"CssClass", ""}, {"ShowSorting", "false"},{ "SorderOrder","asc" }, {"ShowFilter", "false"}},
            new Dictionary<string, string> {{"Name", "Role"},{ "Key","Role"}, {"CssClass", ""}, {"ShowSorting", "false"},{ "SorderOrder","asc" }, {"ShowFilter", "false"}},

        };
        return sampleData;
    }

    private List<Dictionary<string, object>> PaginateData(List<Dictionary<string, object>> data, int currentPage, int pageSize)
    {
        // Perform pagination based on the current page and items per page
        return data.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task ChangePageSize(int itemsPerPage)
    {
        // Change the current page and reload data for the new page
        this.itemsPerPage = itemsPerPage;
        await LoadData();
    }

    private async Task ChangePage(int newPage)
    {
        // Change the current page and reload data for the new page
        currentPage = newPage;
        await LoadData();
    }
}