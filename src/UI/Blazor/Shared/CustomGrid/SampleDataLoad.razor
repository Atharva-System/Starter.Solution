@page "/sampleDataLoad"
@using System.Text
@using System.Text.Json
@using Starter.Blazor.Modules.User.Models
@using Starter.Blazor.Modules.User.Services
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject UserService UserService
<div class="panel mt-6">
    <h5 class="text-lg font-semibold dark:text-white-light">Advanced</h5>
    <div class="dataTable-wrapper dataTable-loading no-footer sortable fixed-columns">
        <div class="dataTable-top"></div>
        <div class="dataTable-container">
            <table id="myTable" class="table-hover whitespace-nowrap dataTable-table">
                <GridHeader HeaderInfo="@headerInfo" />
                <GridBody HeaderInfo="@headerInfo" DisplayedData="@DisplayedData" />
            </table>
        </div>
        <!-- Updated Pagination -->
        <Pagination CurrentPage="@currentPage" ItemPerPage="@itemsPerPage" TotalPages="@totalPages" TotalRecord="@totalRecord" OnPageChange="@ChangePage" OnPageSizeChange="@ChangePageSize" />
    </div>
</div>

@code {
    private List<UserlistDto> DisplayedData = new List<UserlistDto>();
    private List<Dictionary<string, string>> headerInfo = new List<Dictionary<string, string>>();
    private int currentPage = 1;
    private int totalPages = 0;
    private int itemsPerPage = 10;
    private int totalRecord = 0;


    protected override async Task OnInitializedAsync()
    {
        // Load data when the component initializes
        await LoadData();
    }

    private async Task LoadData()
    {
        // Simulate fetching data from a service or database
        // Here, we'll simulate with some hardcoded data
        var allData = await ApiCall<UserlistDto>();

        // Paginate the data based on the current page and items per page
        DisplayedData = PaginateData<UserlistDto>(allData.Data, currentPage, itemsPerPage);

        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)allData.Data.Count / itemsPerPage);
        totalRecord = allData.Data.Count;
    }

    private async Task<GridResponse<T>> ApiCall<T>()
    {
        // Generate sample data - replace with your actual data retrieval logic
        var sampleData = await UserService.GetUserlistsAsync();

        // You may modify and process 'sampleData' as needed

        // Simulating API response structure
        var response = new GridResponse<T>
            {
                Data = sampleData.Cast<T>().ToList(), // Assuming sampleData is of type List<T>
                HeaderInfo = new List<Dictionary<string, string>>
        {
            new Dictionary<string, string> {{"Name", "Full Name"}, {"Key","FullName"}, {"CssClass", ""}, {"ShowSorting", "true"}, {"SorderOrder","asc" }, {"ShowFilter", "true"}},
            new Dictionary<string, string> {{"Name", "Email"}, {"Key","Email"}, {"CssClass", ""}, {"ShowSorting", "false"}, {"SorderOrder","asc" }, {"ShowFilter", "false"}},
            new Dictionary<string, string> {{"Name", "Status"}, {"Key","Status"}, {"CssClass", ""}, {"ShowSorting", "false"}, {"SorderOrder","asc" }, {"ShowFilter", "false"}},
            new Dictionary<string, string> {{"Name", "Role"}, {"Key","Role"}, {"CssClass", ""}, {"ShowSorting", "false"}, {"SorderOrder","asc" }, {"ShowFilter", "false"}}
        }
                // You might have additional properties or metadata here
            };

        return response;
    }

    private List<T> PaginateData<T>(List<T> data, int currentPage, int pageSize)
    {
        // Perform pagination based on the current page and items per page
        return data.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task ChangePageSize(int itemsPerPage)
    {
        // Change the current page and reload data for the new page
        this.itemsPerPage = itemsPerPage;
        await LoadData();
    }

    private async Task ChangePage(int newPage)
    {
        // Change the current page and reload data for the new page
        currentPage = newPage;
        await LoadData();
    }
}