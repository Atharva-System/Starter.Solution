@using Starter.Blazor.Modules.Common
@using Starter.Blazor.Modules.User.Services
@inject IJSRuntime JSRuntime
@typeparam TItem
<script>
    async function showDeleteAlert(id) {
        new window.Swal({
            icon: 'warning',
            title: 'Are you sure you want to delete this record?',
            text: "You won't be able to revert this!",
            showCancelButton: true,
            confirmButtonText: 'Delete',
            padding: '2em',
        }).then((result) => {
            if (result.value) {
                window.DeleteRecordFunction(id);
            }
        });
    }

    async function TriggerEditRecordFunction(id) {
        window.EditRecordFunction(id);
    }

    window.registerFunction = function (dotNetObject) {
        window.DeleteRecordFunction = function (message) {
            dotNetObject.invokeMethodAsync('DeleteRecordById', message)
                .then(result => {
                    console.log('Result from Blazor:', result);
                })
                .catch(error => {
                    console.error('Error calling Blazor function:', error);
                });
        };
        window.EditRecordFunction = function (id) {
            dotNetObject.invokeMethodAsync('EditRecordById', id)
                .then(result => {
                    console.log('Result from Blazor:', result);
                })
                .catch(error => {
                    console.error('Error calling Blazor function:', error);
                });
        };
    };
</script>

<div class="panel mt-6">

    <div class="dataTable-wrapper dataTable-loading no-footer sortable fixed-columns">
        <div class="dataTable-top"></div>
        <div class="dataTable-container">
            <table id="myTable" class="table-hover whitespace-nowrap dataTable-table">
                <thead>
                    <tr>
                        @foreach (var item in HeaderData)
                        {
                            <th data-sortable="" style="width: 10.3537%;" class="@item["SorderOrder"]" @onclick="() =>  OnColumnSorting(item)">
                                <a href="#" class="@((item.ContainsKey("ShowSorting") && Convert.ToBoolean(item["ShowSorting"])) ? "dataTable-sorter" : "")">@item["Name"]</a>
                                @if (item.ContainsKey("ShowFilter") && Convert.ToBoolean(item["ShowFilter"]))
                                {
                                    <form>
                                        <div x-data="dropdown" class="dropdown">
                                            <div class="flex">
                                                <input id="dropdownRight" type="text" placeholder="" class="form-input ltr:rounded-r-none rtl:rounded-l-none" />
                                                <div class="flex items-center justify-center border border-[#e0e6ed] bg-[#eee] px-3 font-semibold ltr:rounded-r-md ltr:border-l-0 rtl:rounded-l-md rtl:border-r-0 dark:border-[#17263c] dark:bg-[#1b2e4b]" @click="toggle" @click.outside="open = false">
                                                    <button type="button"><icon-filter class="bh-w-4"><!----></icon-filter><svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round" class="bh-w-4 ng-star-inserted"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon></svg><!----></button>
                                                </div>
                                            </div>
                                            <ul x-show="open" x-transition="" x-transition.duration.300ms="" class="ltr:right-0 rtl:left-0">
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">No Filter</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Contain</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Not Contain</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Equal</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Not Equal</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Starts With</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Ends With</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Is null</a></li>
                                                <li><a href="javascript:;" style="font-weight:100 !important" @click="toggle">Not null</a></li>
                                            </ul>
                                        </div>
                                    </form>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in GridData)
                    {
                        <tr>
                            @foreach (var headerKey in HeaderData)
                            {
                                if ((headerKey.ContainsKey("SpanTd") && !string.IsNullOrWhiteSpace(headerKey["SpanTd"])))
                                {
                                    @* <td>
                        <span class="badge  @GetGridDataPropertyValue(headerKey["Span"], item) shadow-md dark:group-hover:bg-transparent">
                        @GetGridDataPropertyValue(headerKey["Key"], item)
                        </span>
                        </td> *@

                                }
                                else if ((headerKey.ContainsKey("IsActionButton") && !string.IsNullOrWhiteSpace(headerKey["IsActionButton"])))
                                {
                                    <td>

                                        <div class="flex items-center">
                                            @foreach (var btn in headerKey["Key"].Split(','))
                                            {
                                                if (btn == "Edit")
                                                {
                                                    <button type="button" style="margin:5px !important; color:blue;" @onclick='() => ShowEditRecord(GetGridDataPropertyValue( "Id",item ))'>
                                                        <svg width="17" height="17" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M11.4001 18.1612L11.4001 18.1612L18.796 10.7653C17.7894 10.3464 16.5972 9.6582 15.4697 8.53068C14.342 7.40298 13.6537 6.21058 13.2348 5.2039L5.83882 12.5999L5.83879 12.5999C5.26166 13.1771 4.97307 13.4657 4.7249 13.7838C4.43213 14.1592 4.18114 14.5653 3.97634 14.995C3.80273 15.3593 3.67368 15.7465 3.41556 16.5208L2.05445 20.6042C1.92743 20.9852 2.0266 21.4053 2.31063 21.6894C2.59466 21.9734 3.01478 22.0726 3.39584 21.9456L7.47918 20.5844C8.25351 20.3263 8.6407 20.1973 9.00498 20.0237C9.43469 19.8189 9.84082 19.5679 10.2162 19.2751C10.5343 19.0269 10.823 18.7383 11.4001 18.1612Z" fill="currentColor"></path>
                                                            <path d="M20.8482 8.71306C22.3839 7.17735 22.3839 4.68748 20.8482 3.15178C19.3125 1.61607 16.8226 1.61607 15.2869 3.15178L14.3999 4.03882C14.4121 4.0755 14.4246 4.11268 14.4377 4.15035C14.7628 5.0875 15.3763 6.31601 16.5303 7.47002C17.6843 8.62403 18.9128 9.23749 19.85 9.56262C19.8875 9.57563 19.9245 9.58817 19.961 9.60026L20.8482 8.71306Z" fill="currentColor"></path>
                                                        </svg>
                                                    </button>
                                                }
                                                if (btn == "Delete")
                                                {
                                                    <button type="button" style="margin:5px !important; color:red;" @onclick='() => ShowDeleteAlert(GetGridDataPropertyValue( "Id",item ))'>
                                                        <svg width="17" height="17" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path opacity="0.5" d="M11.5956 22.0001H12.4044C15.1871 22.0001 16.5785 22.0001 17.4831 21.1142C18.3878 20.2283 18.4803 18.7751 18.6654 15.8686L18.9321 11.6807C19.0326 10.1037 19.0828 9.31524 18.6289 8.81558C18.1751 8.31592 17.4087 8.31592 15.876 8.31592H8.12405C6.59127 8.31592 5.82488 8.31592 5.37105 8.81558C4.91722 9.31524 4.96744 10.1037 5.06788 11.6807L5.33459 15.8686C5.5197 18.7751 5.61225 20.2283 6.51689 21.1142C7.42153 22.0001 8.81289 22.0001 11.5956 22.0001Z" fill="currentColor"></path>
                                                            <path d="M3 6.38597C3 5.90152 3.34538 5.50879 3.77143 5.50879L6.43567 5.50832C6.96502 5.49306 7.43202 5.11033 7.61214 4.54412C7.61688 4.52923 7.62232 4.51087 7.64185 4.44424L7.75665 4.05256C7.8269 3.81241 7.8881 3.60318 7.97375 3.41617C8.31209 2.67736 8.93808 2.16432 9.66147 2.03297C9.84457 1.99972 10.0385 1.99986 10.2611 2.00002H13.7391C13.9617 1.99986 14.1556 1.99972 14.3387 2.03297C15.0621 2.16432 15.6881 2.67736 16.0264 3.41617C16.1121 3.60318 16.1733 3.81241 16.2435 4.05256L16.3583 4.44424C16.3778 4.51087 16.3833 4.52923 16.388 4.54412C16.5682 5.11033 17.1278 5.49353 17.6571 5.50879H20.2286C20.6546 5.50879 21 5.90152 21 6.38597C21 6.87043 20.6546 7.26316 20.2286 7.26316H3.77143C3.34538 7.26316 3 6.87043 3 6.38597Z" fill="currentColor"></path>
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M9.42543 11.4815C9.83759 11.4381 10.2051 11.7547 10.2463 12.1885L10.7463 17.4517C10.7875 17.8855 10.4868 18.2724 10.0747 18.3158C9.66253 18.3592 9.29499 18.0426 9.25378 17.6088L8.75378 12.3456C8.71256 11.9118 9.01327 11.5249 9.42543 11.4815Z" fill="currentColor"></path>
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M14.5747 11.4815C14.9868 11.5249 15.2875 11.9118 15.2463 12.3456L14.7463 17.6088C14.7051 18.0426 14.3376 18.3592 13.9254 18.3158C13.5133 18.2724 13.2126 17.8855 13.2538 17.4517L13.7538 12.1885C13.795 11.7547 14.1625 11.4381 14.5747 11.4815Z" fill="currentColor"></path>
                                                        </svg>
                                                    </button>
                                                }

                                            }
                                        </div>
                                    </td>
                                }
                                else
                                {
                                    <td>@GetGridDataPropertyValue(headerKey["Key"], item)</td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <div class="dataTable-bottom">
                <div class="dataTable-info">Showing @Convert.ToString(((PageNumber - 1) * PageSize + 1)) to @Convert.ToString(Math.Min(((PageNumber - 1) * PageSize + 1) + PageSize - 1, TotalRecord)) of @Convert.ToString(TotalRecord) entries</div>
                <div class="dataTable-dropdown">
                    <label>
                        <select class="dataTable-selector" @onchange="OnPageSizeChange">

                            <option value="5" selected="">5</option>
                            <option value="10">10</option>
                            <option value="15">15</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </label>
                </div>
                <nav class="dataTable-pagination">
                    <ul class="dataTable-pagination-list">
                        <li class="pager">
                            <a href="#" data-page="1" @onclick="() => OnPageNumberChange(1)"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"> <path d="M13 19L7 12L13 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="0.5" d="M16.9998 19L10.9998 12L16.9998 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </svg></a>

                        </li>
                        @if (TotalPages > 0)
                        {
                            @for (int i = 1; i <= TotalPages; i++)
                            {
                                int pageNumber = i;
                                <li class="@((i == PageNumber) ? "active" : "")" @onclick="() => OnPageNumberChange(pageNumber)"><a href="#" data-page="@i">@i</a></li>
                            }
                        }
                        <li class="pager">
                            <a href="#" data-page="@TotalPages" @onclick="() => OnPageNumberChange(TotalPages)"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-4.5 h-4.5 rtl:rotate-180"> <path d="M11 19L17 12L11 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> <path opacity="0.5" d="M6.99976 19L12.9998 12L6.99976 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </svg></a>

                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>
@code {
    private async Task ShowDeleteAlert(string id)
    {
        await JSRuntime.InvokeVoidAsync("showDeleteAlert", id);
    }
    private async Task ShowEditRecord(string id)
    {
        await JSRuntime.InvokeVoidAsync("TriggerEditRecordFunction", id);
    }
    [JSInvokable]
    public async Task DeleteRecordById(string id)
    {
        await DeleteRecord.InvokeAsync(id);
    }

    [JSInvokable]
    public async Task EditRecordById(string id)
    {
        await EditRecord.InvokeAsync(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerFunction", DotNetObjectReference.Create(this));
        }
    }

    public delegate Task GridChangeHandler(int id, int pageSize, string[] orderBy);
    [Parameter]
    public GridChangeHandler PageSizeChange { get; set; }
    [Parameter]
    public GridChangeHandler PageNumberChange { get; set; }

    [Parameter]
    public GridChangeHandler ColumnSortingChange { get; set; }

    [Parameter]
    public EventCallback<string> DeleteRecord { get; set; }

    [Parameter]
    public EventCallback<string> EditRecord { get; set; }


    [Parameter]
    public List<Dictionary<string, string>> HeaderData { get; set; } = new List<Dictionary<string, string>>();


    [Parameter]
    public int PageNumber { get; set; } = 1;

    [Parameter]
    public string[] SortColumn { get; set; } = new string[1];

    [Parameter]
    public int PageSize { get; set; } = 0;

    public int TotalPages { get; set; } = 0;

    public int TotalRecord { get; set; } = 0;

    public List<TItem> GridData { get; set; } = new List<TItem>();

    public async Task Refresh(List<TItem> newData, int totalPages, int totalRecord, int pageSize, int pageNumber)
    {
        GridData = newData;
        TotalPages = totalPages;
        TotalRecord = totalRecord;
        PageSize = pageSize;
        PageNumber = pageNumber;
        await InvokeAsync(StateHasChanged);
    }

    private string GetGridDataPropertyValue(string propertyName, TItem t)
    {
        if (t != null)
        {
            var property = typeof(TItem).GetProperty(propertyName);
            if (property != null)
            {
                var value = property.GetValue(t);
                return value?.ToString() ?? "";
            }
        }
        return "";
    }

    private async Task OnPageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int selectedPageSize))
        {
            await PageSizeChange.Invoke(1, selectedPageSize, null);
        }
    }
    private async Task OnPageNumberChange(int pageNumber)
    {

        await PageNumberChange.Invoke(pageNumber, this.PageSize, null);
    }

    private async Task OnColumnSorting(Dictionary<string, string> item)
    {
        if (Convert.ToBoolean(item["ShowSorting"]) == true)
        {
            if (item["SorderOrder"] == "asc")
            {
                item["SorderOrder"] = "desc";
            }
            else
            {
                item["SorderOrder"] = "asc";
            }

            if (SortColumn == null)
            {
                SortColumn = new string[0];
            }
            SortColumn[0] = item["Key"] + " " + item["SorderOrder"];
            await ColumnSortingChange.Invoke(this.PageNumber, this.PageSize, SortColumn);
        }
    }
}
