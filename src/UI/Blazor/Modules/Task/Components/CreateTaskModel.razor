@using Starter.Blazor.Core
@using Starter.Blazor.Modules.Common
@using Starter.Blazor.Modules.Task.Model
@using Starter.Blazor.Modules.Task.Services
@inject ITaskService TaskService

<CascadingBlazoredModal>
    <EditForm Model="@taskDetailsDto" OnValidSubmit="@(SaveTask)">
        <DataAnnotationsValidator />
        <div class="mb-5">
            <label for="title">Title</label>
            <InputText id="title" type="text" placeholder="Enter Task Title" class="form-input" @bind-Value="taskDetailsDto.TaskName" />
        </div>
        <div class="mb-5">
            <label for="assignee">Assignee</label>
            <InputSelect id="assignee" class="form-select" @bind-Value="taskDetailsDto.AssignedTo">
                <option value="">Select Assignee</option>
                <option value="459299df-5cc1-4c70-bf77-6b573e06b83a">Stater Admin</option>
            </InputSelect>
        </div>
        <div class="mb-5 flex justify-between gap-4">
            <div class="flex-1">
                <label for="priority">Priority</label>
                <InputSelect id="priority" class="form-select" @bind-Value="taskDetailsDto.Priority">
                    <option value="">Select Priority</option>
                    @foreach (var Priority in PriorityList)
                    {
                        <option value="@Priority.Id">@Priority.DisplayName</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="mb-5">
            <label for="startDate">Start Date</label>
            <InputDate id="startDate" class="form-input" @bind-Value="taskDetailsDto.StartDate" />
        </div>

        <div class="mb-5">
            <label for="endDate">End Date</label>
            <InputDate id="endDate" class="form-input" @bind-Value="taskDetailsDto.EndDate" />
        </div>
        <div class="mb-5">
            <label for="status">Status</label>
            <InputSelect id="status" class="form-select" @bind-Value="taskDetailsDto.Status">
                <option value="">Select Status</option>
                @foreach (var Status in StatusList)
                {
                    <option value="@Status.Id">@Status.DisplayName</option>
                }
            </InputSelect>
        </div>
        <div class="mb-5">
            <label for="projectId">Project</label>
            <InputSelect id="projectId" placeholder="Enter Project" class="form-select" @bind-Value="projectIdString">
                <option value="0">Select Project</option>
                @foreach (var project in TaskService.Projects)
                {
                    <option value="@project.Id">@project.ProjectName</option>
                }
            </InputSelect>
        </div>
        <div class="mb-5">
            <label>Description</label>
            <InputText class="form-input" @bind-Value="taskDetailsDto.Description" Placeholder="Enter Description here" />
        </div>
        <div class="mt-8 flex items-center justify-end ltr:text-right rtl:text-left">
            <button type="button" class="btn btn-outline-danger" @onclick="@(Cancel)">Cancel</button>
            <button type="submit" class="btn btn-primary ltr:ml-4 rtl:mr-4">@buttonText</button>
        </div>
    </EditForm>
</CascadingBlazoredModal>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public Guid EditTaskID { get; set; }
    [Parameter]
    public Guid DataToPass { get; set; }

    private TaskDetailsDto taskDetailsDto = new TaskDetailsDto
        {
            StartDate = DateTime.Now.Date,
            EndDate = DateTime.Now.Date
        };

    private List<ProjectListDto> projectList = new List<ProjectListDto>();
    private List<EnumTypeViewDto> StatusList = new List<EnumTypeViewDto>();
    private List<EnumTypeViewDto> PriorityList = new List<EnumTypeViewDto>();

    private string mode;
    private string buttonText;

    protected override async void OnInitialized()
    {
        _httpInterceptor.RegisterEvent();

        // Get Project
        projectList = await TaskService.GetProjectlistsAsync();
        var StatusList = await TaskService.GetStatuslistsAsync();
        var PriorityList = await TaskService.GetPrioritylistsAsync();

        if (EditTaskID == Guid.Empty)
        {
            mode = "create";
            taskDetailsDto = new TaskDetailsDto();
            buttonText = "Add";
        }
        else
        {
            mode = "edit";
            buttonText = "Update";

            //Get Task Details
            var UpdatetaskDetails = await TaskService.GetTaskDetails(EditTaskID);

            taskDetailsDto.Description = UpdatetaskDetails.Description;
            taskDetailsDto.Status = UpdatetaskDetails.Status;
            taskDetailsDto.TaskName = UpdatetaskDetails.TaskName;
            taskDetailsDto.StartDate = UpdatetaskDetails.StartDate;
            taskDetailsDto.EndDate = UpdatetaskDetails.EndDate;
            taskDetailsDto.AssignedTo = UpdatetaskDetails.AssignedTo;
            taskDetailsDto.Priority = UpdatetaskDetails.Priority;
            taskDetailsDto.ProjectId = UpdatetaskDetails.ProjectId;
        }
    }

    private async void SaveTask()
    {
        try
        {
            if (mode == "create")
            {
                var response = await TaskService.CreateTaskAsync(taskDetailsDto);
            }
            else
            {
                //var response = await TaskService.UpdateTaskAsync(taskDetailsDto);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        await BlazoredModal.CloseAsync();
    }

    private async void Cancel()
    {
        await BlazoredModal.CloseAsync();
    }

    private string projectIdString
    {
        get => taskDetailsDto.ProjectId.ToString();
        set
        {
            if (Guid.TryParse(value, out var result))
            {
                taskDetailsDto.ProjectId = result;
            }
            else
            {
                Console.WriteLine("Invalid Guid format");
            }
        }
    }
}
