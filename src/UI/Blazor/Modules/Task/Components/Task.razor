@page "/task-list"
@using Microsoft.AspNetCore.Authorization
@using Starter.Blazor.Core.Response
@using Starter.Blazor.Modules.Common
@using Starter.Blazor.Modules.Login.Services
@using Starter.Blazor.Modules.Login.Services.IServices
@using Starter.Blazor.Modules.Task.Model
@using Starter.Blazor.Modules.Task.Services;
@using DataTables.AspNet;
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Collections.Generic;
@using Starter.Blazor.Shared.CustomGrid
@using Starter.Blazor.Shared.Response
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject IAuthService AuthService
@inject ITaskService TaskService
@inject IModalService TaskModal
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject IModalService ModalService

<div>
    <div class="relative flex h-full gap-5 sm:h-[calc(100vh_-_150px)]">
        <div class="panel h-full flex-1 overflow-auto p-0">
            <div class="flex h-full flex-col">
                <div class="flex w-full flex-col gap-4 p-4 sm:flex-row sm:items-center">
                    <div class="flex items-center ltr:mr-3 rtl:ml-3">
                        <div class="group relative flex-1 mr-3">
                            <button class="btn btn-primary w-full" type="button" @onclick="AddTask">
                                Create New Task
                            </button>
                        </div>
                        <button type="button"
                                class="block hover:text-primary ltr:mr-3 rtl:ml-3 xl:hidden"
                                @click="isShowTaskMenu = !isShowTaskMenu">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6">
                                <path d="M20 7L4 7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                <path opacity="0.5" d="M20 12L4 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                <path d="M20 17L4 17" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                            </svg>
                        </button>
                        <div class="group relative flex-1">
                            <input type="text"
                                   class="peer form-input ltr:!pr-10 rtl:!pl-10"
                                   placeholder="Search Task..." />
                            <div class="absolute top-1/2 -translate-y-1/2 peer-focus:text-primary ltr:right-[11px] rtl:left-[11px]">
                                <svg width="24"
                                     height="24"
                                     viewBox="0 0 24 24"
                                     fill="none"
                                     xmlns="http://www.w3.org/2000/svg"
                                     class="h-4 w-4">
                                    <circle cx="11.5" cy="11.5" r="9.5" stroke="currentColor" stroke-width="1.5" opacity="0.5"></circle>
                                    <path d="M18.5 18.5L22 22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                    <div class="flex flex-1 items-center justify-center sm:flex-auto sm:justify-end">
                        <p class="ltr:mr-3 rtl:ml-3"></p>
                        <button type="button"
                                class="rounded-md bg-[#f4f4f4] p-1 enabled:hover:bg-primary-light disabled:cursor-not-allowed disabled:opacity-60 ltr:mr-3 rtl:ml-3 dark:bg-white-dark/20 enabled:dark:hover:bg-white-dark/30">
                            <svg width="24"
                                 height="24"
                                 viewBox="0 0 24 24"
                                 fill="none"
                                 xmlns="http://www.w3.org/2000/svg"
                                 class="h-5 w-5 rtl:rotate-180">
                                <path d="M15 5L9 12L15 19"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"></path>
                            </svg>
                        </button>
                        <button type="button"
                                class="rounded-md bg-[#f4f4f4] p-1 enabled:hover:bg-primary-light disabled:cursor-not-allowed disabled:opacity-60 dark:bg-white-dark/20 enabled:dark:hover:bg-white-dark/30">
                            <svg width="24"
                                 height="24"
                                 viewBox="0 0 24 24"
                                 fill="none"
                                 xmlns="http://www.w3.org/2000/svg"
                                 class="h-5 w-5 ltr:rotate-180">
                                <path d="M15 5L9 12L15 19"
                                      stroke="currentColor"
                                      stroke-width="1.5"
                                      stroke-linecap="round"
                                      stroke-linejoin="round"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="table-responsive">
                    <ReusableGrid @ref="gridRef" TItem="TaskListDto" HeaderData="@headerInfo" PageSizeChange="LoadData" PageNumberChange="LoadData" ColumnSortingChange="LoadData" DeleteRecord="DeleteRecord" EditRecord="EditRecord" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default;

    private bool isAuthenticated;
    public Guid EditTaskID;
    public bool IsEditMode;
    public bool Save = false;

    private ReusableGrid<TaskListDto> gridRef;

    private List<Dictionary<string, string>> headerInfo = new List<Dictionary<string, string>>
    {
        new Dictionary<string, string> { {"Name", "Task Name"}, {"Key","TaskName"}, {"CssClass", ""}, {"ShowSorting", "true"}, {"SorderOrder","asc" }, {"ShowFilter", "false"},{"SpanTd","" } },
        new Dictionary<string, string> { { "Name", "Start Date" }, { "Key", "StartDateDisplay" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" } },
        new Dictionary<string, string> { { "Name", "End Date" }, { "Key", "EndDateDisplay" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" }},
        new Dictionary<string, string> { { "Name", "Status" }, { "Key", "StatusDisplay" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" }},
        new Dictionary<string, string> { { "Name", "Priority" }, { "Key", "PriorityDisplay" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" }},
        new Dictionary<string, string> { { "Name", "Project" }, { "Key", "ProjectName" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" }},
        new Dictionary<string, string> { { "Name", "Action" }, { "Key", "Edit,Delete" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" },{ "IsActionButton","true"} }    };


    private async System.Threading.Tasks.Task LoadData(int PageNumber, int PageSize, string[] OrderBy)
    {
        var paginationRequest = new PaginationRequest
            {
                PageSize = PageSize,
                PageNumber = PageNumber,
                OrderBy = OrderBy
            };

        Tasks = await TaskService.GetTasklistsAsync(paginationRequest);

        if (gridRef != null)
        {
            await gridRef.Refresh(Tasks.Data, Tasks.TotalPages, Tasks.TotalCount, paginationRequest.PageSize, paginationRequest.PageNumber);
        }
    }

    private readonly string toastScriptConstant = @"
        const toast = window.Swal.mixin({
            toast: true,
            position: 'top',
            showConfirmButton: false,
            timer: 3000,
            showCloseButton: true,
        });";

    private PagedDataResponse<List<TaskListDto>> Tasks = new PagedDataResponse<List<TaskListDto>>();

    private PaginationRequest param = new PaginationRequest { PageNumber = 0, PageSize = 10, OrderBy = new[] { "TaskName" } };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var authState = await _stateProvider.GetAuthenticationStateProviderUserAsync();

        if (!authState.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }

        await System.Threading.Tasks.Task.WhenAll(LoadData(1, 5, null));

        Tasks = await TaskService.GetTasklistsAsync(param);

    }

    private async System.Threading.Tasks.Task PageSizeChanged(int pageNumber, int pageSize, string[] OrderBy)
    {
        await LoadData(pageSize, pageNumber, OrderBy);
    }

    private async void AddTask()
    {
        var projectList = await TaskService.GetProjectlistsAsync();
        var StatusList = await TaskService.GetStatuslistsAsync();
        var PriorityList = await TaskService.GetPrioritylistsAsync();
        var AssigneeList = await TaskService.GetAssigneeListAsync();

        Modal.Show<CreateTaskModel>("Create New Task", new ModalParameters
        {
            { nameof(CreateTaskModel.projectList), projectList },
            { nameof(CreateTaskModel.StatusList), StatusList },
            { nameof(CreateTaskModel.PriorityList), PriorityList },
            { nameof(CreateTaskModel.AssigneeList), AssigneeList },
            { nameof(CreateTaskModel.TaskDetails), new TaskListDto(){ Id = Guid.Empty,StartDate = DateTime.UtcNow,EndDate = DateTime.UtcNow.AddDays(2) } }
        });

        await System.Threading.Tasks.Task.WhenAll(LoadData(1, 5, null));
    }

    private async void EditRecord(string Id)
    {
        var TaskDetails = await TaskService.GetTaskDetails(Id);
        var projectList = await TaskService.GetProjectlistsAsync();
        var StatusList = await TaskService.GetStatuslistsAsync();
        var PriorityList = await TaskService.GetPrioritylistsAsync();
        var AssigneeList = await TaskService.GetAssigneeListAsync();
        if (TaskDetails.Success == true)
        {
            Modal.Show<CreateTaskModel>("Edit Task", new ModalParameters
            {
                { nameof(CreateTaskModel.projectList), projectList },
                { nameof(CreateTaskModel.StatusList), StatusList },
                { nameof(CreateTaskModel.PriorityList), PriorityList },
                { nameof(CreateTaskModel.AssigneeList), AssigneeList },
                { nameof(CreateTaskModel.TaskDetails), TaskDetails.Data }
            });
        }
        else
        {

        }

        await System.Threading.Tasks.Task.WhenAll(LoadData(1, 5, null));
    }

    private async System.Threading.Tasks.Task DeleteRecord(string id)
    {
        var result = await TaskService.DeleteTaskAsync(id);

        if (result.Success)
        {
            showToaster(result.Message, "top");
            await LoadData(1, 5, null);
        }
        else
        {
            showToaster(result.Messages.FirstOrDefault(), "top");
        }
    }

    private void showToaster(string msg, string position)
    {
        string toastScript = $"{toastScriptConstant} toast.fire({{ title: '{msg}' }});";
        JSRuntime.InvokeVoidAsync("eval", toastScript);
    }
}