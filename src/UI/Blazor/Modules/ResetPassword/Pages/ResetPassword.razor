@page "/reset-password"
@layout Layout.Public.AuthLayout
@using Starter.Blazor.Modules.Dashboard.Services
@using Starter.Blazor.Modules.ResetPassword.Models
@using Starter.Blazor.Modules.ResetPassword.Services
@using Starter.Blazor.Modules.Projects.Models
@inject NavigationManager Navigation

<EditForm Model="@resetPassword" OnValidSubmit="SendResetPassword">
    <DataAnnotationsValidator />
    <div class="main-container min-h-screen text-black dark:text-white-dark">
        <div class="flex min-h-screen items-center justify-center bg-[url('../images/map.svg')] bg-cover bg-center dark:bg-[url('../images/map-dark.svg')]">
            <div class="panel m-6 w-full max-w-lg sm:w-[480px]">
                <h2 class="mb-3 text-2xl font-bold">Reset Password</h2>
                <p class="mb-7">Enter your New Password</p>

                <div>
                    <label for="newpass">Enter New Password</label>
                    <input id="newpass" @bind="resetPassword.NewPassword" type="password" class="form-input" placeholder="Enter new Password" />
                    <ValidationMessage For="@(() => resetPassword.NewPassword)" />
                </div>
                <div>
                    <label for="confpass">Confirm Password</label>
                    <input id="confpass" @bind="confirmPassword" type="password" class="form-input" placeholder="Confirm password" />
                    <ValidationMessage For="@(() => resetPassword.ConfirmPassword)" />
                </div>

                <div>
                    <button type="submit" class="btn btn-primary w-full">Reset Password</button>
                </div>

                <p class="text-right">
                    <a href="/" class="font-bold text-primary hover:underline">Back To Login</a>
                </p>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    private string email;
    private string token;
    private string newPassword;
    private string confirmPassword;
    private ResetPasswordDto resetPassword = new ResetPasswordDto();

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var emailEncoded = uri.Query.Split("&").FirstOrDefault(param => param.Contains("email"));
        var tokenEncoded = uri.Query.Split("&").FirstOrDefault(param => param.Contains("token"));

        if (!string.IsNullOrEmpty(emailEncoded))
        {
            email = Uri.UnescapeDataString(emailEncoded.Split("=")[1]);
        }

        if (!string.IsNullOrEmpty(tokenEncoded))
        {

            var tokenParam = Navigation.ToAbsoluteUri(Navigation.Uri).Query.Split("&").FirstOrDefault(param => param.Contains("token"));
            token = Uri.UnescapeDataString(tokenParam?.Split("=")[1]);
        }
    }

    private async Task SendResetPassword()
    {
        try
        {
            if (newPassword != confirmPassword)
            {
                Console.WriteLine("Passwords do not match");
                return;
            }
            resetPassword.Email = email;
            resetPassword.Token = token;
            resetPassword.NewPassword = newPassword;
            var result = await resetPasswordService.ResetPasswordAsync(resetPassword);
            Console.WriteLine("Password Changed Successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting password: {ex.Message}");
        }
    }

    [Inject]
    private IResetPasswordService resetPasswordService { get; set; }
}
