@page "/"
@using System.Text
@using System.Text.Json
@using Starter.Blazor.Core
@using Starter.Blazor.Core.AuthProviders
@using Starter.Blazor.Modules.Login.Services
@using Starter.Blazor.Shared.Icons
@using System.Net
@layout Layout.Public.AuthLayout
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject UserAuthID UserAuthId
@inject INotificationService Notification

<div class="main-container min-h-screen text-black dark:text-white-dark">
    <!-- start main content section -->
    <div class="flex min-h-screen">
        <div class="hidden min-h-screen w-1/2 flex-col items-center justify-center bg-gradient-to-t from-[#ff1361bf] to-[#44107A] p-4 text-white dark:text-black lg:flex">
            <div class="mx-auto mb-5 w-full">
                <img src="assets/images/auth-cover.svg" alt="coming_soon" class="mx-auto lg:max-w-[370px] xl:max-w-[500px]" />
            </div>
            <h3 class="mb-4 text-center text-3xl font-bold">Join the community of expert developers</h3>
            <p>It is easy to setup with great customer experience. Start your 7-day free trial</p>
        </div>
        <div class="relative flex w-full items-center justify-center lg:w-1/2">
            <div class="max-w-[480px] p-5 md:p-10">
                <h2 class="mb-3 text-3xl font-bold">Sign In</h2>
                <p class="mb-7">Enter your email and password to login</p>
                <EditForm class="space-y-5" Model="@LoginDto" OnValidSubmit="HandleLogin">

                    <DataAnnotationsValidator />
                    <div>
                        <label for="email">Email</label>
                        <InputText id="email" type="email" class="form-input" placeholder="Enter Email" @bind-Value="LoginDto.Email" />
                        <ValidationMessage For="@(() => LoginDto.Email)" />
                    </div>
                    <div>
                        <label for="password">Password</label>
                        <InputText id="password" type="password" class="form-input" placeholder="Enter Password" @bind-Value="LoginDto.Password" />
                        <ValidationMessage For="@(() => LoginDto.Password)" />
                    </div>
                    <div>
                        <label class="cursor-pointer">
                            <input type="checkbox" class="form-checkbox" />
                            <span class="text-white-dark">Remember me</span>
                        </label>
                    </div>
                    <p class="text-right">
                        <a href="/forgotpassword" class="font-bold text-primary hover:underline">Forgot Password</a>
                    </p>
                    <button type="submit" class="btn btn-primary w-full">SIGN IN</button>
                </EditForm>
                <div class="relative my-7 h-5 text-center before:absolute before:inset-0 before:m-auto before:h-[1px] before:w-full before:bg-[#ebedf2] dark:before:bg-[#253b5c]">
                    <div class="relative z-[1] inline-block bg-[#fafafa] px-2 font-bold text-white-dark dark:bg-[#060818]"><span>OR</span></div>
                </div>
                <ul class="mb-5 flex justify-center gap-2 sm:gap-5">
                    <li>
                        <button type="button"
                                class="btn flex gap-1 bg-white-dark/30 text-black shadow-none hover:bg-white dark:border-[#253b5c] dark:bg-transparent dark:text-white dark:hover:bg-[#1b2e4b] sm:gap-2">
                            @((MarkupString)AppIcons.Google)
                            Google
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                class="btn flex gap-1 bg-white-dark/30 text-black shadow-none hover:bg-white dark:border-[#253b5c] dark:bg-transparent dark:text-white dark:hover:bg-[#1b2e4b] sm:gap-2">
                            @((MarkupString)AppIcons.Github)
                            Github
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                class="btn flex gap-1 bg-white-dark/30 text-black shadow-none hover:bg-white dark:border-[#253b5c] dark:bg-transparent dark:text-white dark:hover:bg-[#1b2e4b] sm:gap-2">
                            @((MarkupString)AppIcons.Twitter)
                            Twitter
                        </button>
                    </li>
                </ul>
                <p class="text-center">
                    Dont't have an account ? <a href="auth-cover-register.html" class="font-bold text-primary hover:underline">Sign Up</a>
                </p>
            </div>
        </div>
    </div>
    <!-- end main content section -->
</div>

@code {
    private loginModel LoginDto = new loginModel();

    [Inject]
    public HttpInterceptorService Interceptor { get; set; }

    // protected override void OnInitialized()
    // {
    //     Interceptor.RegisterEvent();
    // }

    private async Task HandleLogin()
    {
        var response = await AuthService.Login(LoginDto);
        if (response.Success && response.StatusCode == 200)
        {
            await LocalStorage.SetItemAsync("authToken", response.Data.Token);
            await LocalStorage.SetItemAsync("refreshToken", response.Data.RefreshToken);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/dashboard");
            await Notification.Success(response.Message);
        }
        else
        {
            Notification.Failure(String.Join(",",response.Messages));
        }
    }

    // public void Dispose()
    // {
    //     Interceptor.DisposeEvent();
    // }
}
