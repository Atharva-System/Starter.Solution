@page "/userlist"
@using Starter.Blazor.Core
@using Starter.Blazor.Modules.Common
@using Starter.Blazor.Modules.User.Models
@using Starter.Blazor.Modules.User.Services
@using Starter.Blazor.Shared.CustomGrid
@using Starter.Blazor.Shared.Response
@inject IJSRuntime JSRuntime
@inject IUserService UserService

<div x-data="modal">
    <div class="panel h-full w-full">
        <div class="mb-5 flex items-center justify-between">
            <h5 class="text-lg font-semibold dark:text-white-light">Users List</h5>

            <button type="button" class="btn btn-primary" @onclick="ToggleModal">Invite User</button>

        </div>
        <div class="table-responsive">
            <ReusableGrid @ref="gridRef" TItem="UserlistDto" HeaderData="@headerInfo"  PageSizeChange="LoadData" PageNumberChange="LoadData" ColumnSortingChange="LoadData" DeleteRecord="DeleteRecord" EditRecord="EditRecord" />
        </div>
    </div>

    <!-- button -->
    <!-- modal -->
    <div id="userPopup" class="fixed inset-0 bg-[black]/60 z-[999] hidden overflow-y-auto" style="display: none;">
        <div class="flex items-center justify-center min-h-screen px-4">
            <div x-transition x-transition.duration.300 class="panel border-0 py-1 px-4 rounded-lg overflow-hidden w-full max-w-sm my-8">
                <div class="flex items-center justify-between p-5 font-semibold text-lg dark:text-white">
                    Invite User
                </div>
                <div class="p-5" >
                    <EditForm Model="@inviteUser" OnValidSubmit="InviteUser">
                        <DataAnnotationsValidator />
                        <div class="relative mb-4">
                            <label for="FirstName">First Name</label>
                            <input id="FirstName" type="text" class="form-input" placeholder="Enter First Name" @bind-value="inviteUser.FirstName" />
                            <ValidationMessage For="@(() => inviteUser.FirstName)" />
                        </div>


                        <div class="relative mb-4">
                            <label for="LastName">Last Name</label>
                            <input id="LastName" type="text" class="form-input" placeholder="Enter Last Name" @bind="inviteUser.LastName" />
                        </div>
                        <div class="relative mb-4">
                            <label for="LastName">Email</label>
                            <input id="LastName" type="text" class="form-input" placeholder="Enter email" @bind="inviteUser.Email" />
                            <ValidationMessage For="@(() => inviteUser.Email)" />
                        </div>
                        <div class="flex space-x-2 ">
                            <button class="btn btn-danger w-full" @onclick="CloseModal">Close</button>
                            <button type="submit" class="btn btn-primary w-full" disabled="@(isProcessing)">
                                @if (isEditing)
                                {
                                    <span>Update</span>
                                }
                                else
                                {
                                    <span>Invite</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
   
    window.showModal = function () {
        document.getElementById('userPopup').style.display = 'block';
    };

    window.hideModal = function () {
        document.getElementById('userPopup').style.display = 'none';
    };

</script>

@code {
    private bool isEditing = false;
    private bool isProcessing = false;
    private readonly string toastScriptConstant = @"
        const toast = window.Swal.mixin({
            toast: true,
            position: 'top',
            showConfirmButton: false,
            timer: 3000,
            showCloseButton: true,
        });";
    private InviteUserDto inviteUser = new InviteUserDto();

    private ReusableGrid<UserlistDto> gridRef;

    private PagedDataResponse<List<UserlistDto>> DisplayedData = new PagedDataResponse<List<UserlistDto>>();

    private bool IsModalOpen = false;

    protected override void OnInitialized()
    {
        _httpInterceptor.RegisterEvent();
        Task.WhenAll(LoadData(1, 5, null));
    }
    private async Task PageSizeChanged(int pageNumber, int pageSize, string[] OrderBy)
    {
        await LoadData(pageSize, pageNumber, OrderBy);
    }

    private async Task DeleteRecord(string id)
    {
        var result = await UserService.DeleteUser(id);

        if (result.Success)
        {
            showToaster(result.Data, "top");
            await LoadData(1, 5, null);
        }
        else
        {
            showToaster(result.Messages.FirstOrDefault(), "top");
        }
    }

    private async Task EditRecord(string id)
    {
        var result = await UserService.GetUserDetailsByIdAsync(id);

        if (result.Success)
        {
            isEditing = true;
            inviteUser.FirstName = result.Data.FirstName;
            inviteUser.LastName = result.Data.LastName;
            inviteUser.Email = result.Data.Email;
            inviteUser.Id = result.Data.Id;
            await ToggleModal();
        }
        else
        {
            showToaster(result.Messages.FirstOrDefault(), "top");
        }
    }

    private async Task UpdateUser()
    {
        UserlistDto userlistDto = new UserlistDto();
        userlistDto.FirstName = inviteUser.FirstName;
        userlistDto.LastName = inviteUser.LastName;
        userlistDto.Email = inviteUser.Email;
        userlistDto.Id = inviteUser.Id;
        var result = await UserService.UpdateUserAsync(userlistDto);
        isProcessing = true;

        if (result.Success)
        {
            showToaster(result.Data, "top");
            inviteUser.FirstName = string.Empty;
            inviteUser.LastName = string.Empty;
            inviteUser.Email = string.Empty;
            inviteUser.Id = string.Empty;
            isEditing = false;
            isProcessing = false;
            await ToggleModal();
            await LoadData(1, 5, null);
        }
        else
        {
            showToaster(result.Messages.FirstOrDefault(), "top");
            this.isProcessing = false;
        }
    }

    private async Task LoadData(int PageNumber, int PageSize, string[] OrderBy)
    {
        var paginationRequest = new PaginationRequest
            {
                PageSize = PageSize,
                PageNumber = PageNumber,
                OrderBy = OrderBy
            };

        DisplayedData = await UserService.GetUserlistsAsync(paginationRequest);

        if (gridRef != null)
        {
            await gridRef.Refresh(DisplayedData.Data, DisplayedData.TotalPages, DisplayedData.TotalCount, paginationRequest.PageSize, paginationRequest.PageNumber);
        }
    }
    private List<Dictionary<string, string>> headerInfo = new List<Dictionary<string, string>>
    {
        new Dictionary<string, string> {{"Name", "Full Name"}, {"Key","FullName"}, {"CssClass", ""}, {"ShowSorting", "true"}, {"SorderOrder","asc" }, {"ShowFilter", "false"},{"SpanTd","" } },
        new Dictionary<string, string> { { "Name", "Email" }, { "Key", "Email" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" } },
        new Dictionary<string, string> { { "Name", "Status" }, { "Key", "Status" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" } },
        new Dictionary<string, string> { { "Name", "Role" }, { "Key", "Role" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" }},
        new Dictionary<string, string> { { "Name", "Action" }, { "Key", "Edit,Delete" }, { "CssClass", "" }, { "ShowSorting", "false" }, { "SorderOrder", "asc" }, { "ShowFilter", "false" },{"SpanTd","" },{ "IsActionButton","true"} }
    };
    private void showToaster(string msg, string position)
    {
        string toastScript = $"{toastScriptConstant} toast.fire({{ title: '{msg}' }});";
        JSRuntime.InvokeVoidAsync("eval", toastScript);
    }

    private async Task InviteUser()
    {
        if (!isEditing)
        {
            isProcessing = true;
            var result = await UserService.InviteUserAsync(inviteUser);
            if (result.Success)
            {
                isProcessing = false;
                showToaster(result.Data, "top");

                inviteUser.FirstName = string.Empty;
                inviteUser.LastName = string.Empty;
                inviteUser.Email = string.Empty;
                inviteUser.Id = string.Empty;
                isEditing = false;
                await ToggleModal();
                await LoadData(1, 5, null);
            }
            else
            {
                isProcessing = false;
                showToaster(result.Messages.FirstOrDefault(), "top");
            }
        }
        else
        {
            UpdateUser();
        }
    }
    private async Task ToggleModal()
    {
        IsModalOpen = !IsModalOpen;

        if (IsModalOpen)
        {
            await JSRuntime.InvokeVoidAsync("showModal");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("hideModal");
        }
    }
    private async Task CloseModal()
    {
        inviteUser = new InviteUserDto();
        await ToggleModal();
        isEditing = false;
    }
}