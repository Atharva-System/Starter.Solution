@page "/forgotpassword"
@attribute [AllowAnonymous]
@layout Layout.Public.AuthLayout
@using Starter.Blazor.Modules.ForgotPassword.Pages
@using Starter.Blazor.Modules.ForgotPassword.Models
@using Starter.Blazor.Modules.ForgotPassword.Services
@inject IJSRuntime JSRuntime

<div class="main-container min-h-screen text-black dark:text-white-dark">

    <div class="flex min-h-screen items-center justify-center bg-[url('../images/map.svg')] bg-cover bg-center dark:bg-[url('../images/map-dark.svg')]">
        <div class="panel m-6 w-full max-w-lg sm:w-[480px]">
            <h2 class="mb-3 text-2xl font-bold">Forgot Password</h2>
            <p class="mb-7">Enter your registered email to recover your Password</p>
            <EditForm Model="@forgotPassword" OnValidSubmit="SendForgotPasswordRequest">
                <DataAnnotationsValidator />

                <div>
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="forgotPassword.Email" class="form-input" placeholder="Enter Email" />
                    <ValidationMessage For="@(() => forgotPassword.Email)" />
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary w-full">Send Request</button>
                </div>

                <p class="text-right mt-2">
                    <a href="/" class="font-bold text-primary hover:underline">Back To Login</a>
                </p>
            </EditForm>
        </div>
    </div>

</div>
@code
{
    private string Email;
    private ForgotPasswordDto forgotPassword = new ForgotPasswordDto();
    [Inject]
    private IForgotPasswordService passwordservice { get; set; }

    private async Task SendForgotPasswordRequest()
    {

        try
        {
            var result = await passwordservice.ForgotPasswordAsync(forgotPassword);
            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("showSuccessAlert");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showErrorAlert", string.Join(", ", result.Messages));
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", ex.Message);
        }
    }
}
<script>
    function showSuccessAlert() {
        new window.Swal({
            icon: 'success',
            title: 'Mail Sent Successfully!',
            text: 'Your reset password request has been sent successfully.',
            padding: '2em',
        });
    }
    function showErrorAlert(errorMessage) {
        new window.Swal({
            icon: 'error',
            title: 'Error!',
            text: 'Please enter registered email',
            padding: '2em',
        });
    }
</script>